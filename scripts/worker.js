/*/////////////////////////////////////////////////////////////////////////////
/// @summary Implements the entry point for the Web Worker used to load and
/// cache content in the background.
/// @author Russell Klenk (russ@ninjabirdstudios.com)
///////////////////////////////////////////////////////////////////////////80*/
/// Import our required scripts. For Workers, script locations are specified
/// relative to their parent script.
importScripts('content.js');

/// Take care of vendor prefixes on postMessage. If possible, we would like to
/// use Transferrable objects to pass ArrayBuffer or ArrayBufferView back to
/// the client application.
self.postMessage = self.webkitPostMessage || self.postMessage;

/// The global server instance. All operations that occur on the worker are
/// forwarded to this server instance.
var server       = new ContentJS.ContentServer();

/// Callback to handle messages received from the parent script.
/// @param event An object specifying additional information about the message.
self.onmessage   = function (event)
{
    server.handleClientMessage(event.data);
};

/// Callback to handle messages generated by the content server. These messages
/// are sent back to the parent script.
/// @param sender The ContentJS.ContentServer instance that raised the event.
/// @param data The message object to serialize.
/// @param buffers An optional array of ArrayBuffer instances to be sent as
/// part of the message data.
function handleServerMessage(sender, data)
{
    if (data.resourceType === 'arraybuffer')
    {
        // try to transfer the ArrayBuffer instead of copying it.
        postMessage(data, [data.resourceData]);
    }
    else
    {
        // the entire response data will be copied to the client.
        postMessage(data);
    }
}

/// Callback to handle errors generated by the content server. The error is
/// sent back to the parent script.
/// @param sender The ContentJS.ContentServer instance that raised the event.
/// @param error The error message or Error instance to send to the client.
/// @param requestId The client request identifier. This value may be undefined
/// and is only present when an error occurs in response to a resource request.
function handleServerError(sender, error, requestId)
{
    postMessage({
        id        : ContentJS.ClientCommand.ERROR,
        requestId : requestId,
        error     : error
    });
}

/// Register for event notifications from the content server.
server.on('error',   handleServerError);
server.on('message', handleServerMessage);
